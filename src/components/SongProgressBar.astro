<!-- <script>
import { millisToMinutesAndSeconds, mapRange } from '@/utils/time';
import { $ } from '@/utils/querySelector';

  const songLength = 310000;
  let $progressbar = $("#song-progressbar");
  let $currentTime = $("#current-time");
  let $totalTime = $("#total-time");
  let secondsProgress = 0;
  let percentageProgress = 0;

  ($totalTime as HTMLElement).innerText = millisToMinutesAndSeconds(songLength);

  const interval = setInterval(() => {
    secondsProgress += 1000;
    percentageProgress = mapRange(secondsProgress, 0, songLength, 0, 100);

    ($progressbar as HTMLElement).style.width = `${percentageProgress}%`;
    ($currentTime as HTMLElement).innerText =
      millisToMinutesAndSeconds(secondsProgress);
  }, 1000);

  setTimeout(() => {
    clearInterval(interval);
  }, songLength);
</script> -->

<div class="flex flex-row justify-center items-center">
  <span id="current-time" class="font-light text-xs text-gray-400">-:-</span>
  <div id="song-progressbar-container" class="group w-full py-2 hover:cursor-pointer">
    <div class="bg-gray-600 rounded-full h-1 mx-4">
      <div
        id="song-progressbar-track"
        class="relative bg-white h-1 rounded-full group-hover:bg-accent"
        style="width: 75%"
      >
        <!-- Slider thumb -->
        <div
          class="hidden absolute -right-1.5 -top-1 size-3 shadow shadow-black rounded-full bg-white group-hover:block"
        >
        </div>
      </div>
    </div>
  </div>
  <span id="total-time" class="font-light text-xs text-gray-400">-:-</span>
</div>
  
<script>
    import { millisToMinutesAndSeconds, mapRange } from '@/utils/time';
    import { $ } from '@/utils/querySelector';

    const $currentTime = $("#current-time");
    const $totalTime = $("#total-time");
    const $songProgress = $("#song-progressbar-container");
    const $songProgressTrack = $("#song-progressbar-track");

    const songDuration = 310000; // 05:10
    const offsetStartEnd = 10;
    let isDragging = false;

    $totalTime.innerText = millisToMinutesAndSeconds(songDuration);

    $songProgress.addEventListener("mousedown", (event) => {
        isDragging = true;
        updateProgressValue(event);
    });

    $songProgress.addEventListener("mousemove", (event) => {
        if (isDragging) {
            updateProgressValue(event);
        }
    });

    document.addEventListener("mouseup", () => {
        isDragging = false;
    });

    const updateProgressValue = (event: MouseEvent) => {

        const {left, right} = $songProgress.getBoundingClientRect();

        const percent = mapRange(
            event.clientX,
            (left + offsetStartEnd),
            (right - offsetStartEnd),
            0,
            100,
        ).toFixed();

        $songProgressTrack.style.width = `${percent}%`;

    }
</script>
